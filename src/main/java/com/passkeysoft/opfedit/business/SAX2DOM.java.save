package com.passkeysoft.opfedit.business;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.ProcessingInstruction;
import org.w3c.dom.Text;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.DefaultHandler;

public class SAX2DOM extends DefaultHandler
        implements ContentHandler, DTDHandler, ErrorHandler, EntityResolver, LexicalHandler
{
    private DocumentBuilder db;
    private Document _doc = null;
    private Element _root = null, _curr = null;
    private CDATASection _cdata;
    
    public SAX2DOM()
    {
        final DocumentBuilderFactory DOMfactory = DocumentBuilderFactory.newInstance();
        DOMfactory.setValidating( false );

        try
        {
            db = DOMfactory.newDocumentBuilder();
            db.setEntityResolver( new EntityResolver()
            {
                public InputSource resolveEntity( String arg0, String arg1 ) throws SAXException,
                        IOException
                {
                    return new InputSource( new StringReader( "" ) );
                }
            } );
        }
        catch (ParserConfigurationException ex)
        {
            ex.printStackTrace();
        }
    }
    
    
    public Document parse( SAXParser parser, InputStream html ) 
        throws ParserConfigurationException, SAXException, UnsupportedEncodingException, IOException
    {
        parser.getXMLReader().setContentHandler( this );
        parser.setProperty( "http://xml.org/sax/properties/lexical-handler", this );
        parser.parse( new InputSource( new InputStreamReader( html, "UTF-8") ), this );
        return _doc;
    }
    
    
    @Override
    public InputSource resolveEntity( String publicId, String systemId )
            throws SAXException, IOException
    {
        if (null != systemId)
        {
            if ( systemId.contains( ".dtd" ))
                return new InputSource( new FileInputStream( "xhtml1-transitional.dtd" ));
            else
                return new InputSource( systemId );
        }
        return null;
    }

    @Override
    public void warning( SAXParseException exception ) throws SAXException
    {
        throw exception;
    }

    @Override
    public void error( SAXParseException exception ) throws SAXException
    {
        throw exception;
    }

    @Override
    public void fatalError( SAXParseException exception ) throws SAXException
    {
        throw exception;
    }

    @Override
    public void notationDecl( String name, String publicId, String systemId )
            throws SAXException
    {
        System.err.println( publicId );
        System.err.println( systemId );
        System.err.println( name );
    }

    @Override
    public void unparsedEntityDecl( String name, String publicId, String systemId,
            String notationName ) throws SAXException
    {
        System.err.println( publicId );
        System.err.println( systemId );
        System.err.println( name );
    }

    @Override
    public void setDocumentLocator( Locator locator )
    {
        // TODO Auto-generated method stub

    }

    @Override
    public void startDocument() throws SAXException
    {
        _doc = db.newDocument();
        _root = null;
        _curr = null;
    }

    @Override
    public void endDocument() throws SAXException
    {
    }

    @Override
    public void startPrefixMapping( String prefix, String uri ) throws SAXException
    {
        // TODO Auto-generated method stub

    }

    @Override
    public void endPrefixMapping( String prefix ) throws SAXException
    {
        // TODO Auto-generated method stub

    }

    @Override
    public void startElement( String uri, String localName, String qName, Attributes atts )
            throws SAXException
    {
        Element el =_doc.createElement( qName );
        for (int i = 0; i < atts.getLength(); i++)
        {
           el.setAttribute( atts.getQName( i ), atts.getValue( i) );
        }
        if ( null == _root )
        {
            _doc.appendChild( el );
            _root = el;
        }
        else
            _curr.appendChild( el );
        _curr = el;
    }

    @Override
    public void endElement( String uri, String localName, String qName )
            throws SAXException
    {
        if ( _curr != _root)
        {
            if ( qName.equals( _curr.getNodeName() ))
                _curr = (Element) _curr.getParentNode();
            else
                throw new SAXParseException( "Unmatched node ", qName, qName, 0, 0 );
        }
    }

    @Override
    public void characters( char[] ch, int start, int length ) throws SAXException
    {
        String text = new String( ch, start, length );
        if (null != _cdata)
        {
            _cdata.appendData( text );
        }
        else
        {
            Text textNode = _doc.createTextNode( text );
            _curr.appendChild( textNode );
        }
    }

    @Override
    public void ignorableWhitespace( char[] ch, int start, int length ) throws SAXException
    {
//        System.out.print( new String( ch, start, length ));
    }

    @Override
    public void processingInstruction( String target, String data ) throws SAXException
    {
        ProcessingInstruction pi = _doc.createProcessingInstruction( target, data );
        _curr.appendChild( pi );
    }

    @Override
    public void skippedEntity( String name ) throws SAXException
    {
        System.err.println( name );
    }


    @Override
    public void startDTD( String name, String publicId, String systemId )
            throws SAXException
    {
//        System.err.println( publicId );
//        System.err.println( systemId );
//        System.err.println( name );
    }


    @Override
    public void endDTD() throws SAXException
    {
        // TODO Auto-generated method stub
        
    }


    @Override
    public void startEntity( String name ) throws SAXException
    {
//        if (!name.startsWith( "[" ) && !name.startsWith( "%" ) && null != _curr)
//        {
//            EntityReference ref = _doc.createEntityReference( name );
//            _curr.appendChild( ref );
//        }
    }


    @Override
    public void endEntity( String name ) throws SAXException
    {
    }


    @Override
    public void startCDATA() throws SAXException
    {
        _cdata = _doc.createCDATASection( "" );
        
    }


    @Override
    public void endCDATA() throws SAXException
    {
        if (null != _cdata)
        {
            _curr.appendChild( _cdata );
            _cdata = null;
        }
    }


    @Override
    public void comment( char[] ch, int start, int length ) throws SAXException
    {
        Comment comment = _doc.createComment( new String( ch, start, length ) );
        if (null != _curr)
            _curr.appendChild( comment );
    }

}
